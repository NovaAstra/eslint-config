import RegexpPlugin from 'eslint-plugin-regexp';
import { createConfig } from "../createConfig"

export const regexp = createConfig({
  plugins: {
    regexp: RegexpPlugin
  },
  rules: {
    // eslint core rules
    "no-control-regex": "error",
    "no-misleading-character-class": "error",
    "no-regex-spaces": "error",
    "prefer-regex-literals": "error",

    // eslint-plugin-regexp rules
    "regexp/match-any": "error",
    "regexp/no-empty-capturing-group": "error",
    "regexp/no-dupe-characters-character-class": "error",
    "regexp/no-empty-group": "error",
    "regexp/no-empty-lookarounds-assertion": "error",
    "regexp/no-escape-backspace": "error",
    "regexp/no-invisible-character": "error",
    "regexp/no-octal": "error",
    "regexp/no-useless-two-nums-quantifier": "error",
    "regexp/prefer-d": "error",
    "regexp/prefer-plus-quantifier": "error",
    "regexp/prefer-question-quantifier": "error",
    "regexp/prefer-star-quantifier": "error",
    "regexp/prefer-w": "error",
    "regexp/prefer-quantifier": "error",
    "regexp/no-useless-character-class": "error",
    "regexp/no-useless-lazy": "error",
    "regexp/prefer-regexp-exec": "error",
    "regexp/prefer-regexp-test": "error",
    "regexp/prefer-unicode-codepoint-escapes": "error",
    "regexp/no-useless-range": "error",
    "regexp/prefer-range": "error",
    "regexp/prefer-character-class": "error",
    "regexp/no-useless-non-capturing-group": "error",
    "regexp/no-useless-escape": "error",
    "regexp/negation": "error",
    "regexp/no-legacy-features": "error",
    "regexp/no-useless-dollar-replacements": "error",
    "regexp/prefer-escape-replacement-dollar-char": "error",
    "regexp/no-unused-capturing-group": "error",
    "regexp/confusing-quantifier": "error",
    "regexp/no-empty-alternative": "error",
    "regexp/no-lazy-ends": "error",
    "regexp/optimal-lookaround-quantifier": "error",
    "regexp/no-trivially-nested-assertion": "error",
    "regexp/no-potentially-useless-backreference": "error",
    "regexp/no-obscure-range": "error",
    "regexp/no-optional-assertion": "error",
    "regexp/no-useless-assertions": "error",
    "regexp/prefer-named-backreference": "error",
    "regexp/no-useless-flag": "error",
    "regexp/no-trivially-nested-quantifier": "error",
    "regexp/sort-flags": "error",
    "regexp/no-non-standard-flag": "error",
    "regexp/control-character-escape": "error",
    "regexp/prefer-predefined-assertion": "error",
    "regexp/no-standalone-backslash": "error",
    "regexp/no-useless-quantifier": "error",
    "regexp/no-zero-quantifier": "error",
    "regexp/no-dupe-disjunctions": "error",
    "regexp/optimal-quantifier-concatenation": "error",
    "regexp/strict": "error",
    "regexp/sort-alternatives": "error",
    "regexp/no-super-linear-backtracking": "error",
    "regexp/no-super-linear-move": "error",
    "regexp/no-invalid-regexp": "error",
    "regexp/no-contradiction-with-assertion": "error",
    "regexp/prefer-lookaround": "error",
    "regexp/no-empty-character-class": "error",
    "regexp/prefer-named-capture-group": "error",
    "regexp/require-unicode-regexp": "error",
    "regexp/no-misleading-unicode-character": "error",
    "regexp/no-control-character": "error",
    "regexp/use-ignore-case": "error",
    "regexp/prefer-named-replacement": "error",
    "regexp/prefer-result-array-groups": "error",
    "regexp/no-missing-g-flag": "error",
    "regexp/no-extra-lookaround-assertions": "error",
    "regexp/no-misleading-capturing-group": "error",
    "regexp/simplify-set-operations": "error",
    "regexp/no-useless-string-literal": "error",
    "regexp/no-empty-string-literal": "error",
    "regexp/no-useless-set-operand": "error",
    "regexp/prefer-set-operation": "error",
    "regexp/grapheme-string-literal": "error",
    "regexp/require-unicode-sets-regexp": "error",
    "regexp/letter-case": [
      "error",
      {
        "caseInsensitive": "lowercase",
        "unicodeEscape": "uppercase",
        "hexadecimalEscape": "uppercase",
        "controlEscape": "uppercase"
      }
    ],
    "regexp/hexadecimal-escape": ["error", "never"],
    "regexp/unicode-escape": ["error", "unicodeEscape"],
    "regexp/unicode-property": [
      "error",
      {
        "generalCategory": "never",
        "key": "long",
        "property": "long"
      }
    ],
  },
})